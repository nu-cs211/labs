% vim: se et:
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{211lang}[2020/04/13 0.0.1]

\newif\if@cxx\@cxxfalse
\DeclareOption{cxx}{\@cxxtrue}
\ProcessOptions\relax

\RequirePackage[final]{listings}
\RequirePackage{newunicodechar}

\lstdefinelanguage[211]{make}
  {otherkeywords={$<,$@,$\%,$?,$^,$+,$*},%
   keywords=[3]{CC,CFLAGS,CPPFLAGS,LDFLAGS,SHELL,MAKE,MAKEFLAGS},%
   sensitive=true,%
   morecomment=[l]\#,%
   morestring=[b]",%
  }[keywords,comments,strings]%

\lstdefinelanguage[211]{C}[ANSI]{C}%
{%
  % C library macros
  morekeywords=[2]{%
    assert,%
    CHAR_MIN,CHAR_MAX,UCHAR_MAX,SCHAR_MIN,SCHAR_MAX,
    SHRT_MIN,SHRT_MAX,USHRT_MAX,
    INT_MIN,INT_MAX,UINT_MAX,
    LONG_MIN,LONG_MAX,ULONG_MAX,
    LLONG_MIN,LLONG_MAX,ULLONG_MAX,
    M_PI,NULL,%
  },
  % lib211 macros
  morekeywords=[3]{%
    CHECK,%
    CHECK_CHAR,%
    CHECK_INT,CHECK_UINT,%
    CHECK_LONG,CHECK_ULONG,CHECK_SIZE,%
    CHECK_DOUBLE,%
    CHECK_STRING,%
    CHECK_POINTER,%
  },
  % C library types
  morekeywords=[4]{%
    FILE,size_t,ssize_t,%
  },
  % lib211 types
  morekeywords=[5]{%
  },
  % C library functions
  morekeywords=[6]{%
    abs,fabs,fprintf,free,fscanf,%
    getchar,islower,isupper,malloc,printf,%
    scanf,sqrt,stderr,stdin,stdout,%
    strcmp,toupper,%
  },
  % lib211 functions
  morekeywords=[7]{%
    eprintf,%
    read_line,%
    fread_line,%
    prompt_line,%
  },
  % morecomment=[l][\PreprocessorTok]{\#},%
}

\lstdefinelanguage[211]{C++}[11]{C++}%
{%
  % actual reserved words
  morekeywords=[1]{%
    override,%
  },
  % C/C++ library macros
  morekeywords=[2]{%
    assert,%
    static_assert,%
    INT_MIN,INT_MAX,M_PI,NULL,%
  },
  % catch macros
  morekeywords=[3]{%
    TEST_CASE,CHECK,CHECK_THROWS_AS,CHECK_FALSE,%
  }
  % Standard library types
  morekeywords=[4]{%
    % C
    FILE,size_t,ssize_t,%
    % C++
    string,vector,%
    istream,ostream,%
    ifstream,ofstream,%
  },
  % ge211 types
  morekeywords=[5]{%
    Sprite,%
  },
  % Standard library functions
  morekeywords=[6]{%
    % C
    abs,fabs,fprintf,free,fscanf,%
    getchar,isupper,malloc,printf,%
    scanf,sqrt,stderr,stdin,stdout,%
    strcmp,toupper,%
    % C++:
    cin,cout,cerr,%
    getline,%
  },
  % ge211 functions
  morekeywords=[7]{%
  },
  % morecomment=[l][\PreprocessorTok]{\#},%
}

\newcommand\set@current@lang[1]{%
  \if@cxx
    \lstset{language=[211]C++,#1}%
  \else
    \lstset{language=[211]C,#1}%
  \fi
}

\newcommand\@old@dagger{†}
\let\@current@dagger=\@old@dagger
\newunicodechar{†}{\@current@dagger}

\def\InstructionPointerColor{}
\def\ReturnAddressColor{}

\def\IPMARK#1{%
  \alt<#1>
    {\InstructionPointerColor{\ensuremath{\blacktriangleright}}}
    {\ReturnAddressColor{\ensuremath{\blacktriangleleft}}}%
}

\def\IP@plain#1#2{\uncover<#1,#2>{\IPMARK{#2}}}
\def\IP@pointy#1<#2>{\IP@plain{#1}{#2}}
\newcommand\IP[1][0]{\@ifnextchar<{\IP@pointy{#1}}{\IP@plain{#1}}}

\lstnewenvironment{Code}[1][]
{%
  \begingroup
  \let\@current@dagger=\IP
  \set@current@lang{#1}
}
{%
  \endgroup
}

\newsavebox{\CodeHeading@savebox}

\lstnewenvironment{CodeHeading}[2][]
{%
  \addcontentsline{toc}{subsubsection}{-- #2}%
  \set@current@lang{%
    aboveskip=2pt plus 0pt,
    belowskip=2pt plus 0pt,
    linewidth=0.95\linewidth,
    #1
  }%
  \global\setbox\CodeHeading@savebox\vbox\bgroup
}
{%
  \egroup
  \vspace{.5ex plus 0.1ex}
  \begin{trivlist}
    \item\framebox[\linewidth]{\usebox{\CodeHeading@savebox}}
  \end{trivlist}
  \vspace{.25ex plus 0.05ex}
}

\lstnewenvironment{Make}[1][]
{%
  \begingroup
  \lstset{%
    language=[211]make,%
  }
}
{%
  \endgroup
}

\newcommand{\textCode}{%
  \set@current@lang{}%
  \lstinline
}

\let\sup^
\catcode`^\active
\def^{\@ifnextchar^\nb@textCode\br@textCode}
\def\nb@textCode^#1^^{\textCode{#1}}
\def\br@textCode#1^{{%
  \lstset{
    breaklines=true,
    breakatwhitespace=true,
  }%
  \textCode{#1}%
}}

